// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.

use core::{In, Out};
use methods::{NEEDLE_IN_HAYSTACK_ELF, NEEDLE_IN_HAYSTACK_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    let pre_image: Vec<u8> = "this is a long byte array or something".as_bytes().to_vec();
    let byte_chunk: [u8; 4] = " is ".as_bytes().try_into().unwrap();
    let input = In {
        pre_image: pre_image.clone(),
        byte_chunk: byte_chunk,
        offset: 4,
    };
    println!("input: {:?}", input);
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env, NEEDLE_IN_HAYSTACK_ELF).unwrap();

    let output: Out = receipt.journal.decode().unwrap();
    println!("output: {:?}", output);
    receipt.verify(NEEDLE_IN_HAYSTACK_ID).unwrap();

    println!(
        "I know the keccak256 preimage of {}, and I know that {:?} exists at offset {} within the preimage!",
        output.hash, output.byte_chunk, output.offset
    );
}
